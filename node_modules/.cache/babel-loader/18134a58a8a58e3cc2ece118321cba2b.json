{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\src\\\\context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { storeProducts, detailProduct } from \"./data\";\nexport const ProductContext = React.createContext();\nexport const ProductProvider = props => {\n  // state = {\n  //   products: [],\n  //   detailProduct,\n  //   cart: [],\n  //   modalProduct: detailProduct,\n  //   cartSubTotal: 0,\n  //   cartTax: 0,\n  //   cartTotal: 0\n  // };\n  // state \n  //  setting \"products on state\"\n  useEffect(() => {\n    settingProducts();\n  }, []);\n\n  const settingProducts = () => {\n    let products = [];\n    storeProducts.forEach(item => {\n      const singleItem = _objectSpread({}, item);\n\n      products = [...products, singleItem];\n    });\n    setProducts(products);\n    console.log(products);\n  }; // Handling the click event to show Product details.\n\n\n  const getProduct = id => {\n    return products.find(item => item.id === id);\n  };\n\n  const handleDetail = id => {\n    const product = getProduct(id);\n    setDetailProduct(product);\n  }; // Add to Cart\n\n\n  const addToCart = id => {\n    const cartItem = getProduct(id);\n    const cart = [...cart]; // If item is already in the cart,  increment the count\n    // if (cart.indexOf(cartItem) >= 0) {\n    //   incrementCount(id);\n    // }\n    // If item is not added, add it to cart.\n    // else {\n\n    cartItem.count = 1;\n    const price = cartItem.price;\n    cartItem.total = price;\n    setState({\n      cart: [...state.cart, cartItem]\n    }, () => addTotals()); // }\n  }; // Opening of Modal upon adding items to the cart\n  // openModal = id => {\n  //   const product = getProduct(id);\n  //   setState({\n  //     modalProduct: product\n  //   });\n  // };\n  // Increment product count in cart\n  // incrementCount = id => {\n  //   let tempCart = [...state.cart];\n  //   const incrementedCartItem = tempCart.find(item => item.id === id);\n  //   incrementedCartItem.count += 1;\n  //   incrementedCartItem.total =\n  //     incrementedCartItem.price * incrementedCartItem.count;\n  //   setState(\n  //     {\n  //       cart: [...tempCart]\n  //     },\n  //     addTotals()\n  //   );\n  // };\n  // Decrement product count in cart\n  // decrementCount = id => {\n  //   let tempCart = [...state.cart];\n  //   const decrementedCartItem = tempCart.find(item => item.id === id);\n  //   decrementedCartItem.count -= 1;\n  //   if (decrementedCartItem.count === 0) {\n  //     removeCartItem(id);\n  //   } else {\n  //     decrementedCartItem.total =\n  //       decrementedCartItem.price * decrementedCartItem.count;\n  //     setState(\n  //       {\n  //         cart: [...tempCart]\n  //       },\n  //       addTotals()\n  //     );\n  //   }\n  // };\n  // // Remove item from cart\n  // removeCartItem = id => {\n  //   const newCartItems = state.cart.filter(item => id !== item.id);\n  //   setState(\n  //     {\n  //       cart: [...newCartItems]\n  //     },\n  //     () => addTotals()\n  //   );\n  // };\n  // // Reset cart\n  // resetCart = () => {\n  //   setState(\n  //     {\n  //       cart: []\n  //     },\n  //     () => {\n  //       setProducts();\n  //       addTotals();\n  //     }\n  //   );\n  // };\n  // //  Calculate total amount in cart\n  // addTotals = () => {\n  //   let cartSubTotal = 0;\n  //   state.cart.map(item => (cartSubTotal += item.total));\n  //   const tempTax = cartSubTotal * 0.1;\n  //   const cartTax = parseFloat(tempTax.toFixed(2));\n  //   const cartTotal = cartSubTotal + cartTax;\n  //   setState({\n  //     cartSubTotal,\n  //     cartTax,\n  //     cartTotal\n  //   });\n  // };\n\n\n  return React.createElement(ProductContext.Provider, {\n    value: {\n      products,\n      handleDetail,\n      detailProduct,\n      addToCart // addToCart: addToCart,\n      // openModal: openModal,\n      // closeModal: closeModal,\n      // incrementCount: incrementCount,\n      // decrementCount: decrementCount,\n      // removeCartItem: removeCartItem,\n      // resetCart: resetCart\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\shop-coffee - Copy\\src\\context.js"],"names":["React","useState","useEffect","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","props","settingProducts","products","forEach","item","singleItem","setProducts","console","log","getProduct","id","find","handleDetail","product","setDetailProduct","addToCart","cartItem","cart","count","price","total","setState","state","addTotals","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,QAA7C;AAEA,OAAO,MAAMC,cAAc,GAAGL,KAAK,CAACM,aAAN,EAAvB;AAEP,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,eAAe,GAAG,MAAM;AAC5B,QAAIC,QAAQ,GAAG,EAAf;AACAP,IAAAA,aAAa,CAACQ,OAAd,CAAsBC,IAAI,IAAI;AAC5B,YAAMC,UAAU,qBAAQD,IAAR,CAAhB;;AACAF,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcG,UAAd,CAAX;AACD,KAHD;AAIAC,IAAAA,WAAW,CAACJ,QAAD,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACD,GARD,CAlBsC,CA4BtC;;;AAEA,QAAMO,UAAU,GAAGC,EAAE,IAAI;AACvB,WAAOR,QAAQ,CAACS,IAAT,CAAcP,IAAI,IAAIA,IAAI,CAACM,EAAL,KAAYA,EAAlC,CAAP;AACD,GAFD;;AAGA,QAAME,YAAY,GAAGF,EAAE,IAAI;AACzB,UAAMG,OAAO,GAAGJ,UAAU,CAACC,EAAD,CAA1B;AACAI,IAAAA,gBAAgB,CAACD,OAAD,CAAhB;AACD,GAHD,CAjCsC,CAsCtC;;;AAEA,QAAME,SAAS,GAAGL,EAAE,IAAI;AACtB,UAAMM,QAAQ,GAAGP,UAAU,CAACC,EAAD,CAA3B;AAEA,UAAMO,IAAI,GAAG,CAAC,GAAGA,IAAJ,CAAb,CAHsB,CAKtB;AAEA;AACA;AACA;AACA;AACA;;AACAD,IAAAA,QAAQ,CAACE,KAAT,GAAiB,CAAjB;AACA,UAAMC,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AACAH,IAAAA,QAAQ,CAACI,KAAT,GAAiBD,KAAjB;AAEAE,IAAAA,QAAQ,CACN;AACEJ,MAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBD,QAAhB;AADR,KADM,EAIN,MAAMO,SAAS,EAJT,CAAR,CAhBsB,CAsBtB;AACD,GAvBD,CAxCsC,CAiEtC;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLrB,MAAAA,QADK;AAELU,MAAAA,YAFK;AAGLhB,MAAAA,aAHK;AAILmB,MAAAA,SAJK,CAKL;AACA;AACA;AACA;AACA;AACA;AACA;;AAXK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeGf,KAAK,CAACwB,QAfT,CADF;AAmBD,CA5KM","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { storeProducts, detailProduct } from \"./data\";\r\n\r\nexport const ProductContext = React.createContext();\r\n\r\nexport const ProductProvider = props => {\r\n  // state = {\r\n  //   products: [],\r\n  //   detailProduct,\r\n  //   cart: [],\r\n  //   modalProduct: detailProduct,\r\n  //   cartSubTotal: 0,\r\n  //   cartTax: 0,\r\n  //   cartTotal: 0\r\n  // };\r\n\r\n  // state \r\n  //  setting \"products on state\"\r\n\r\n  useEffect(() => {\r\n    settingProducts();\r\n  }, []);\r\n\r\n  const settingProducts = () => {\r\n    let products = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      products = [...products, singleItem];\r\n    });\r\n    setProducts(products);\r\n    console.log(products);\r\n  };\r\n\r\n  // Handling the click event to show Product details.\r\n\r\n  const getProduct = id => {\r\n    return products.find(item => item.id === id);\r\n  };\r\n  const handleDetail = id => {\r\n    const product = getProduct(id);\r\n    setDetailProduct(product);\r\n  };\r\n\r\n  // Add to Cart\r\n\r\n  const addToCart = id => {\r\n    const cartItem = getProduct(id);\r\n\r\n    const cart = [...cart];\r\n\r\n    // If item is already in the cart,  increment the count\r\n\r\n    // if (cart.indexOf(cartItem) >= 0) {\r\n    //   incrementCount(id);\r\n    // }\r\n    // If item is not added, add it to cart.\r\n    // else {\r\n    cartItem.count = 1;\r\n    const price = cartItem.price;\r\n    cartItem.total = price;\r\n\r\n    setState(\r\n      {\r\n        cart: [...state.cart, cartItem]\r\n      },\r\n      () => addTotals()\r\n    );\r\n    // }\r\n  };\r\n\r\n  // Opening of Modal upon adding items to the cart\r\n\r\n  // openModal = id => {\r\n  //   const product = getProduct(id);\r\n  //   setState({\r\n  //     modalProduct: product\r\n  //   });\r\n  // };\r\n\r\n  // Increment product count in cart\r\n\r\n  // incrementCount = id => {\r\n  //   let tempCart = [...state.cart];\r\n\r\n  //   const incrementedCartItem = tempCart.find(item => item.id === id);\r\n  //   incrementedCartItem.count += 1;\r\n  //   incrementedCartItem.total =\r\n  //     incrementedCartItem.price * incrementedCartItem.count;\r\n\r\n  //   setState(\r\n  //     {\r\n  //       cart: [...tempCart]\r\n  //     },\r\n  //     addTotals()\r\n  //   );\r\n  // };\r\n  // Decrement product count in cart\r\n\r\n  // decrementCount = id => {\r\n  //   let tempCart = [...state.cart];\r\n\r\n  //   const decrementedCartItem = tempCart.find(item => item.id === id);\r\n\r\n  //   decrementedCartItem.count -= 1;\r\n  //   if (decrementedCartItem.count === 0) {\r\n  //     removeCartItem(id);\r\n  //   } else {\r\n  //     decrementedCartItem.total =\r\n  //       decrementedCartItem.price * decrementedCartItem.count;\r\n  //     setState(\r\n  //       {\r\n  //         cart: [...tempCart]\r\n  //       },\r\n  //       addTotals()\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // // Remove item from cart\r\n\r\n  // removeCartItem = id => {\r\n  //   const newCartItems = state.cart.filter(item => id !== item.id);\r\n  //   setState(\r\n  //     {\r\n  //       cart: [...newCartItems]\r\n  //     },\r\n  //     () => addTotals()\r\n  //   );\r\n  // };\r\n\r\n  // // Reset cart\r\n\r\n  // resetCart = () => {\r\n  //   setState(\r\n  //     {\r\n  //       cart: []\r\n  //     },\r\n  //     () => {\r\n  //       setProducts();\r\n  //       addTotals();\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  // //  Calculate total amount in cart\r\n  // addTotals = () => {\r\n  //   let cartSubTotal = 0;\r\n  //   state.cart.map(item => (cartSubTotal += item.total));\r\n  //   const tempTax = cartSubTotal * 0.1;\r\n  //   const cartTax = parseFloat(tempTax.toFixed(2));\r\n  //   const cartTotal = cartSubTotal + cartTax;\r\n  //   setState({\r\n  //     cartSubTotal,\r\n  //     cartTax,\r\n  //     cartTotal\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <ProductContext.Provider\r\n      value={{\r\n        products,\r\n        handleDetail,\r\n        detailProduct,\r\n        addToCart\r\n        // addToCart: addToCart,\r\n        // openModal: openModal,\r\n        // closeModal: closeModal,\r\n        // incrementCount: incrementCount,\r\n        // decrementCount: decrementCount,\r\n        // removeCartItem: removeCartItem,\r\n        // resetCart: resetCart\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}