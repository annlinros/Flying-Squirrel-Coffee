{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\src\\\\context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { storeProducts, detailOfProduct } from \"./data\";\nexport const ProductContext = React.createContext();\nexport const ProductProvider = props => {\n  // state declaration\n  const productDetails = detailOfProduct.productDetails;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        products = _useState2[0],\n        setProducts = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        detailProduct = _useState4[0],\n        setDetailProduct = _useState4[1];\n\n  const _useState5 = useState(productDetails),\n        _useState6 = _slicedToArray(_useState5, 2),\n        modalProduct = _useState6[0],\n        setModalProduct = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        cart = _useState8[0],\n        setCart = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        cartSubTotal = _useState10[0],\n        setCartSubTotal = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        cartTax = _useState12[0],\n        setCartTax = _useState12[1];\n\n  const _useState13 = useState(0),\n        _useState14 = _slicedToArray(_useState13, 2),\n        cartTotal = _useState14[0],\n        setCartTotal = _useState14[1]; //  setting \"products on state\"\n\n\n  useEffect(() => {\n    settingProducts();\n  }, []);\n\n  const settingProducts = () => {\n    let products = [];\n    storeProducts.forEach(item => {\n      const singleItem = _objectSpread({}, item);\n\n      products = [...products, singleItem];\n    });\n    setProducts(products);\n    console.log(products);\n  }; // Handling the click event to show Product details.\n\n\n  const getProduct = id => {\n    return products.find(item => item.id === id);\n  };\n\n  const handleDetail = id => {\n    const product = getProduct(id);\n    setDetailProduct(product);\n  }; // Add to Cart\n\n\n  const addToCart = id => {\n    const cartItem = getProduct(id);\n    const newCart = [...cart]; // If item is already in the cart,  increment the count\n\n    if (cart.indexOf(cartItem) >= 0) {\n      incrementCount(id);\n    } // If item is not added, add it to cart.\n    else {\n        cartItem.count = 1;\n        const price = cartItem.price;\n        cartItem.total = price;\n        newCart.push(cartItem);\n        setCart(newCart);\n      }\n  }; // Opening of Modal upon adding items to the cart\n\n\n  const openModal = id => {\n    const product = getProduct(id);\n    setModalProduct(product);\n  }; // Increment product count in cart\n\n\n  const incrementCount = id => {\n    let tempCart = [...cart];\n    const incrementedCartItem = tempCart.find(item => item.id === id);\n    incrementedCartItem.count += 1;\n    incrementedCartItem.total = incrementedCartItem.price * incrementedCartItem.count;\n    setCart(tempCart);\n  }; // Decrement product count in cart\n\n\n  const decrementCount = id => {\n    let tempCart = [...cart];\n    const decrementedCartItem = tempCart.find(item => item.id === id);\n    decrementedCartItem.count -= 1;\n\n    if (decrementedCartItem.count === 0) {\n      removeCartItem(id);\n    } else {\n      decrementedCartItem.total = decrementedCartItem.price * decrementedCartItem.count;\n      setCart(tempCart);\n    }\n  }; // // Remove item from cart\n\n\n  const removeCartItem = id => {\n    const newCartItems = cart.filter(item => id !== item.id);\n    setCart(newCartItems);\n  }; //  Reset cart\n\n\n  const resetCart = () => {\n    setCart([]);\n  }; // //  Calculate total amount in cart\n\n\n  const addTotals = () => {\n    let cartSubTotal = 0;\n    cart.map(item => cartSubTotal += item.total);\n    const tempTax = cartSubTotal * 0.1;\n    const cartTax = parseFloat(tempTax.toFixed(2));\n    const cartTotal = cartSubTotal + cartTax;\n    setCartSubTotal(cartSubTotal);\n    setCartTax(cartTax);\n    setCartTotal(cartTotal);\n  }; //  runs the addTotals everytime cart changes, to update the CartTotals component.\n\n\n  useEffect(() => addTotals(), [cart]);\n  return React.createElement(ProductContext.Provider, {\n    value: {\n      products,\n      handleDetail,\n      detailProduct,\n      addToCart,\n      cart,\n      modalProduct,\n      openModal,\n      removeCartItem,\n      incrementCount,\n      decrementCount,\n      resetCart,\n      cartSubTotal,\n      cartTax,\n      cartTotal\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\shop-coffee - Copy\\src\\context.js"],"names":["React","useState","useEffect","storeProducts","detailOfProduct","ProductContext","createContext","ProductProvider","props","productDetails","products","setProducts","detailProduct","setDetailProduct","modalProduct","setModalProduct","cart","setCart","cartSubTotal","setCartSubTotal","cartTax","setCartTax","cartTotal","setCartTotal","settingProducts","forEach","item","singleItem","console","log","getProduct","id","find","handleDetail","product","addToCart","cartItem","newCart","indexOf","incrementCount","count","price","total","push","openModal","tempCart","incrementedCartItem","decrementCount","decrementedCartItem","removeCartItem","newCartItems","filter","resetCart","addTotals","map","tempTax","parseFloat","toFixed","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { storeProducts, detailOfProduct } from \"./data\";\r\n\r\nexport const ProductContext = React.createContext();\r\n\r\nexport const ProductProvider = props => {\r\n\r\n  // state declaration\r\n   const {productDetails} = detailOfProduct\r\n  const [products, setProducts] = useState([]);\r\n  const [detailProduct, setDetailProduct] = useState({});\r\n  const[modalProduct,setModalProduct] = useState(productDetails)\r\n  const [cart, setCart] = useState([]);\r\n  const [cartSubTotal, setCartSubTotal] = useState(0);\r\n  const [cartTax, setCartTax] = useState(0);\r\n  const [cartTotal, setCartTotal] = useState(0);\r\n\r\n  //  setting \"products on state\"\r\n\r\n  useEffect(() => {\r\n    settingProducts();\r\n  }, []);\r\n\r\n  const settingProducts = () => {\r\n    let products = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      products = [...products, singleItem];\r\n    });\r\n    setProducts(products);\r\n    console.log(products);\r\n  };\r\n\r\n  // Handling the click event to show Product details.\r\n\r\n  const getProduct = id => {\r\n    return products.find(item => item.id === id);\r\n  };\r\n  const handleDetail = id => {\r\n    const product = getProduct(id);\r\n    setDetailProduct(product);\r\n  };\r\n\r\n  // Add to Cart\r\n\r\n  const addToCart = id => {\r\n    const cartItem = getProduct(id);\r\n\r\n    const newCart = [...cart];\r\n\r\n    // If item is already in the cart,  increment the count\r\n\r\n    if (cart.indexOf(cartItem) >= 0) {\r\n      incrementCount(id);\r\n    }\r\n    // If item is not added, add it to cart.\r\n    else {\r\n      cartItem.count = 1;\r\n      const price = cartItem.price;\r\n      cartItem.total = price;\r\n      newCart.push(cartItem);\r\n\r\n      setCart(newCart);\r\n    }\r\n  };\r\n\r\n  // Opening of Modal upon adding items to the cart\r\n\r\n  const openModal = id => {\r\n    const product = getProduct(id);\r\n    setModalProduct(product)\r\n  };\r\n\r\n  // Increment product count in cart\r\n\r\n  const incrementCount = id => {\r\n    let tempCart = [...cart];\r\n\r\n    const incrementedCartItem = tempCart.find(item => item.id === id);\r\n    incrementedCartItem.count += 1;\r\n    incrementedCartItem.total =\r\n      incrementedCartItem.price * incrementedCartItem.count;\r\n\r\n    setCart(tempCart);\r\n  };\r\n\r\n  // Decrement product count in cart\r\n\r\n  const decrementCount = id => {\r\n    let tempCart = [...cart];\r\n\r\n    const decrementedCartItem = tempCart.find(item => item.id === id);\r\n\r\n    decrementedCartItem.count -= 1;\r\n    if (decrementedCartItem.count === 0) {\r\n      removeCartItem(id);\r\n    } else {\r\n      decrementedCartItem.total =\r\n        decrementedCartItem.price * decrementedCartItem.count;\r\n      setCart(tempCart);\r\n    }\r\n  };\r\n\r\n  // // Remove item from cart\r\n\r\n  const removeCartItem = id => {\r\n    const newCartItems = cart.filter(item => id !== item.id);\r\n    setCart(newCartItems);\r\n  };\r\n\r\n  //  Reset cart\r\n\r\n  const resetCart = () => {\r\n    setCart([])\r\n  };\r\n\r\n  // //  Calculate total amount in cart\r\n const addTotals = () => {\r\n    let cartSubTotal = 0;\r\n    cart.map(item => (cartSubTotal += item.total));\r\n    const tempTax = cartSubTotal * 0.1;\r\n    const cartTax = parseFloat(tempTax.toFixed(2));\r\n    const cartTotal = cartSubTotal + cartTax;\r\n   setCartSubTotal(cartSubTotal);\r\n   setCartTax(cartTax);\r\n   setCartTotal(cartTotal)\r\n  };\r\n//  runs the addTotals everytime cart changes, to update the CartTotals component.\r\n useEffect(() => addTotals(), [cart])\r\n\r\n  return (\r\n    <ProductContext.Provider\r\n      value={{\r\n        products,\r\n        handleDetail,\r\n        detailProduct,\r\n        addToCart,\r\n        cart,\r\n        modalProduct,\r\n        openModal,\r\n        removeCartItem,\r\n        incrementCount,\r\n        decrementCount,\r\n        resetCart,\r\n        cartSubTotal,\r\n        cartTax,\r\n        cartTotal\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}