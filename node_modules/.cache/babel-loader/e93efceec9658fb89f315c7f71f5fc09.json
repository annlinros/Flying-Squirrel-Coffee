{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\shop-coffee - Copy\\\\src\\\\context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { storeProducts, detailProduct } from \"./data\";\nexport const ProductContext = React.createContext();\nexport const ProductProvider = props => {\n  // state = {\n  //   products: [],\n  //   detailProduct,\n  //   cart: [],\n  //   modalProduct: detailProduct,\n  //   cartSubTotal: 0,\n  //   cartTax: 0,\n  //   cartTotal: 0\n  // };\n  //  setting \"products on state\"\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        products = _useState2[0],\n        setProducts = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        detailProduct = _useState4[0],\n        setDetailProduct = _useState4[1];\n\n  useEffect(() => {\n    settingProducts();\n  }, []);\n\n  const settingProducts = () => {\n    let products = [];\n    storeProducts.forEach(item => {\n      const singleItem = _objectSpread({}, item);\n\n      products = [...products, singleItem];\n    });\n    setProducts(products);\n    console.log(products);\n  }; // Handling the click event to show Product details.\n\n\n  const getProduct = id => {\n    return products.find(item => item.id === id);\n  };\n\n  const handleDetail = id => {\n    const product = getProduct(id);\n    setDetailProducts();\n  }; // Add to Cart\n  // addToCart = id => {\n  //   const cartItem = this.getProduct(id);\n  //   const cart = [...this.state.cart];\n  //   // If item is already in the cart,  increment the count\n  //   if (cart.indexOf(cartItem) >= 0) {\n  //     this.incrementCount(id);\n  //   }\n  //   // If item is not added, add it to cart.\n  //   else {\n  //     cartItem.count = 1;\n  //     const price = cartItem.price;\n  //     cartItem.total = price;\n  //     this.setState(\n  //       {\n  //         cart: [...this.state.cart, cartItem]\n  //       },\n  //       () => this.addTotals()\n  //     );\n  //   }\n  // };\n  // Opening of Modal upon adding items to the cart\n  // openModal = id => {\n  //   const product = this.getProduct(id);\n  //   this.setState({\n  //     modalProduct: product\n  //   });\n  // };\n  // Increment product count in cart\n  // incrementCount = id => {\n  //   let tempCart = [...this.state.cart];\n  //   const incrementedCartItem = tempCart.find(item => item.id === id);\n  //   incrementedCartItem.count += 1;\n  //   incrementedCartItem.total =\n  //     incrementedCartItem.price * incrementedCartItem.count;\n  //   this.setState(\n  //     {\n  //       cart: [...tempCart]\n  //     },\n  //     this.addTotals()\n  //   );\n  // };\n  // Decrement product count in cart\n  // decrementCount = id => {\n  //   let tempCart = [...this.state.cart];\n  //   const decrementedCartItem = tempCart.find(item => item.id === id);\n  //   decrementedCartItem.count -= 1;\n  //   if (decrementedCartItem.count === 0) {\n  //     this.removeCartItem(id);\n  //   } else {\n  //     decrementedCartItem.total =\n  //       decrementedCartItem.price * decrementedCartItem.count;\n  //     this.setState(\n  //       {\n  //         cart: [...tempCart]\n  //       },\n  //       this.addTotals()\n  //     );\n  //   }\n  // };\n  // // Remove item from cart\n  // removeCartItem = id => {\n  //   const newCartItems = this.state.cart.filter(item => id !== item.id);\n  //   this.setState(\n  //     {\n  //       cart: [...newCartItems]\n  //     },\n  //     () => this.addTotals()\n  //   );\n  // };\n  // // Reset cart\n  // resetCart = () => {\n  //   this.setState(\n  //     {\n  //       cart: []\n  //     },\n  //     () => {\n  //       this.setProducts();\n  //       this.addTotals();\n  //     }\n  //   );\n  // };\n  // //  Calculate total amount in cart\n  // addTotals = () => {\n  //   let cartSubTotal = 0;\n  //   this.state.cart.map(item => (cartSubTotal += item.total));\n  //   const tempTax = cartSubTotal * 0.1;\n  //   const cartTax = parseFloat(tempTax.toFixed(2));\n  //   const cartTotal = cartSubTotal + cartTax;\n  //   this.setState({\n  //     cartSubTotal,\n  //     cartTax,\n  //     cartTotal\n  //   });\n  // };\n\n\n  return React.createElement(ProductContext.Provider, {\n    value: {\n      products // handleDetail,\n      // addToCart: this.addToCart,\n      // openModal: this.openModal,\n      // closeModal: this.closeModal,\n      // incrementCount: this.incrementCount,\n      // decrementCount: this.decrementCount,\n      // removeCartItem: this.removeCartItem,\n      // resetCart: this.resetCart\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\shop-coffee - Copy\\src\\context.js"],"names":["React","useState","useEffect","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","props","products","setProducts","setDetailProduct","settingProducts","forEach","item","singleItem","console","log","getProduct","id","find","handleDetail","product","setDetailProducts","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,QAA7C;AAEA,OAAO,MAAMC,cAAc,GAAGL,KAAK,CAACM,aAAN,EAAvB;AAEP,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAXsC,oBAaRP,QAAQ,CAAC,EAAD,CAbA;AAAA;AAAA,QAahCQ,QAbgC;AAAA,QAavBC,WAbuB;;AAAA,qBAcMT,QAAQ,CAAC,EAAD,CAdd;AAAA;AAAA,QAc7BG,aAd6B;AAAA,QAcdO,gBAdc;;AAiBtCT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,eAAe,GAAG,MAAM;AAC5B,QAAIH,QAAQ,GAAG,EAAf;AACAN,IAAAA,aAAa,CAACU,OAAd,CAAsBC,IAAI,IAAI;AAC5B,YAAMC,UAAU,qBAAQD,IAAR,CAAhB;;AACAL,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcM,UAAd,CAAX;AACD,KAHD;AAIAL,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACD,GARD,CArBsC,CA+BtC;;;AAEA,QAAMS,UAAU,GAAGC,EAAE,IAAI;AACvB,WAAOV,QAAQ,CAACW,IAAT,CAAcN,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYA,EAAlC,CAAP;AACD,GAFD;;AAGA,QAAME,YAAY,GAAGF,EAAE,IAAI;AACzB,UAAMG,OAAO,GAAGJ,UAAU,CAACC,EAAD,CAA1B;AACAI,IAAAA,iBAAiB;AAClB,GAHD,CApCsC,CAyCtC;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EACH;AAACd,MAAAA,QAAD,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AARF,KAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGD,KAAK,CAACgB,QAdT,CADF;AAkBD,CA9KM","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { storeProducts, detailProduct } from \"./data\";\r\n\r\nexport const ProductContext = React.createContext();\r\n\r\nexport const ProductProvider = props => {\r\n  // state = {\r\n  //   products: [],\r\n  //   detailProduct,\r\n  //   cart: [],\r\n  //   modalProduct: detailProduct,\r\n  //   cartSubTotal: 0,\r\n  //   cartTax: 0,\r\n  //   cartTotal: 0\r\n  // };\r\n\r\n  //  setting \"products on state\"\r\n\r\n  const[products,setProducts] = useState([]);\r\n    const [detailProduct, setDetailProduct] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n    settingProducts();\r\n  }, []);\r\n\r\n  const settingProducts = () => {\r\n    let products = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      products = [...products, singleItem];\r\n    });\r\n    setProducts(products)\r\n    console.log(products);\r\n  };\r\n\r\n  // Handling the click event to show Product details.\r\n\r\n  const getProduct = id => {\r\n    return products.find(item => item.id === id);\r\n  };\r\n  const handleDetail = id => {\r\n    const product = getProduct(id);\r\n    setDetailProducts()\r\n  };\r\n\r\n  // Add to Cart\r\n\r\n  // addToCart = id => {\r\n  //   const cartItem = this.getProduct(id);\r\n\r\n  //   const cart = [...this.state.cart];\r\n\r\n  //   // If item is already in the cart,  increment the count\r\n\r\n  //   if (cart.indexOf(cartItem) >= 0) {\r\n  //     this.incrementCount(id);\r\n  //   }\r\n  //   // If item is not added, add it to cart.\r\n  //   else {\r\n  //     cartItem.count = 1;\r\n  //     const price = cartItem.price;\r\n  //     cartItem.total = price;\r\n\r\n  //     this.setState(\r\n  //       {\r\n  //         cart: [...this.state.cart, cartItem]\r\n  //       },\r\n  //       () => this.addTotals()\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // Opening of Modal upon adding items to the cart\r\n\r\n  // openModal = id => {\r\n  //   const product = this.getProduct(id);\r\n  //   this.setState({\r\n  //     modalProduct: product\r\n  //   });\r\n  // };\r\n\r\n  // Increment product count in cart\r\n\r\n  // incrementCount = id => {\r\n  //   let tempCart = [...this.state.cart];\r\n\r\n  //   const incrementedCartItem = tempCart.find(item => item.id === id);\r\n  //   incrementedCartItem.count += 1;\r\n  //   incrementedCartItem.total =\r\n  //     incrementedCartItem.price * incrementedCartItem.count;\r\n\r\n  //   this.setState(\r\n  //     {\r\n  //       cart: [...tempCart]\r\n  //     },\r\n  //     this.addTotals()\r\n  //   );\r\n  // };\r\n  // Decrement product count in cart\r\n\r\n  // decrementCount = id => {\r\n  //   let tempCart = [...this.state.cart];\r\n\r\n  //   const decrementedCartItem = tempCart.find(item => item.id === id);\r\n\r\n  //   decrementedCartItem.count -= 1;\r\n  //   if (decrementedCartItem.count === 0) {\r\n  //     this.removeCartItem(id);\r\n  //   } else {\r\n  //     decrementedCartItem.total =\r\n  //       decrementedCartItem.price * decrementedCartItem.count;\r\n  //     this.setState(\r\n  //       {\r\n  //         cart: [...tempCart]\r\n  //       },\r\n  //       this.addTotals()\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // // Remove item from cart\r\n\r\n  // removeCartItem = id => {\r\n  //   const newCartItems = this.state.cart.filter(item => id !== item.id);\r\n  //   this.setState(\r\n  //     {\r\n  //       cart: [...newCartItems]\r\n  //     },\r\n  //     () => this.addTotals()\r\n  //   );\r\n  // };\r\n\r\n  // // Reset cart\r\n\r\n  // resetCart = () => {\r\n  //   this.setState(\r\n  //     {\r\n  //       cart: []\r\n  //     },\r\n  //     () => {\r\n  //       this.setProducts();\r\n  //       this.addTotals();\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  // //  Calculate total amount in cart\r\n  // addTotals = () => {\r\n  //   let cartSubTotal = 0;\r\n  //   this.state.cart.map(item => (cartSubTotal += item.total));\r\n  //   const tempTax = cartSubTotal * 0.1;\r\n  //   const cartTax = parseFloat(tempTax.toFixed(2));\r\n  //   const cartTotal = cartSubTotal + cartTax;\r\n  //   this.setState({\r\n  //     cartSubTotal,\r\n  //     cartTax,\r\n  //     cartTotal\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <ProductContext.Provider\r\n      value={\r\n        {products\r\n          // handleDetail,\r\n          // addToCart: this.addToCart,\r\n          // openModal: this.openModal,\r\n          // closeModal: this.closeModal,\r\n          // incrementCount: this.incrementCount,\r\n          // decrementCount: this.decrementCount,\r\n          // removeCartItem: this.removeCartItem,\r\n          // resetCart: this.resetCart\r\n        }\r\n      }\r\n    >\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}